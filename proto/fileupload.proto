syntax = "proto3";

option go_package = "github.com/benjamin-rood/x-grpc/proto";

package fileupload;

/**
 * Uploader specifies a single gRPC call for a client-streaming
 * file upload to a server.
 *
 * Servers are expected to return sensible status codes as per
 * https://grpc.github.io/grpc/core/md_doc_statuscodes.html
 */
service Uploader {
  rpc UploadFile (stream UploadRequest) returns (UploadResponse);
}

/**
 * UploadRequest requires a file name to write to disk,
 * along with a streamed chunk of bytes. When `file_chunk` is nil, the stream is completed?
 */
message UploadRequest {
  // TODO: implement as a oneof
  // oneof request {
  //   FileMetadata metadata = 1;
  //   bytes chunk = 2; // #required
  // }
  bytes chunk = 2; // #required
}

// FIXME: use
message FileMetadata {
  string file_name = 1; // #required
  string mime_type = 2; // # optional mimetype string e.g. `application/json`
}

/**
 * UploadResponse returns on successfully completed file upload;
 * otherwise server will return an appropriate gRPC error message
 * along with an error status code.
 */
message UploadResponse {
  string file_name = 1; // #required
  string mime_type = 2; // # optional mimetype string e.g. `application/json`
  uint32 size = 3; // in bytes
}
